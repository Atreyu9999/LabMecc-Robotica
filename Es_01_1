clear; clc; close all;

%% Instantiate camera grabber

% Replace here the IP address of the IP camera
IP_ADDRESS = "192.168.2.141";
url = 'http://' + IP_ADDRESS + ':8080/video';
% Create the object (replace here your own username and password)
USERNAME = "andrea";
PASSWORD = "computervision";
cam = ipcam(url, USERNAME, PASSWORD);
% Preview (uncomment next line to test communication)
% preview(cam)

%% Live display of continuosly acquired frames

% Create the figure
figure();
picture = snapshot(cam);
AR = size(picture,2)/size(picture,1);
picture = imresize(picture,[480, 480 * AR]);
fig = imshow(picture);
% Update the image with the latest frame until window is closed
nframes = 0;
i = 0;  
prevboardSize = [0 0];
while true
    try
        picture = snapshot(cam);
        picture = imresize(picture,[480, 480 * AR]);
        set(fig, 'CData', picture);
        title(string(nframes))
        drawnow;
        nframes = nframes + 1;
        if mod(nframes,50) == 0
            [imagePoints,boardSize] = detectCheckerboardPoints(picture);
            if(prevboardSize(1) == 0 && prevboardSize(2) == 0)
            prevboardSize = boardSize;
            end
            x = max(boardSize) - max(prevboardSize);
            y = min(boardSize) - min(prevboardSize);
           
            if (x==0 && y ==0 && length(imagePoints) == ((boardSize(1)-1)*(boardSize(2)-1)))
                i = i+1;
                

                name = sprintf('checkerboard_%d',i);
                saveas(gcf,name,'png');
                markedName = sprintf('Marked_checkerboard_%d',i);


                prevboardSize = boardSize;

                markedPicture = insertMarker(picture, imagePoints(:,:), 'o', 'Color', 'red', 'Size', 10);
                
%                 marked_fig = imshow(markedPicture);
                saveas(marked_fig,markedName, 'png');
                
            end
           if i == 15
                close;
                
                break;
           end
        end
    catch ME
        if ~strcmp(ME.identifier, 'MATLAB:class:InvalidHandle')
            close all
            error(ME.message)
        end
        break;
    end
end

%% Close communication
clear cam

% funzioni : - detectCheckerboardPoints
%            - estimateCameraParameters
%            - generateCheckerboardPoints
